<!DOCTYPE html>
<html lang="en">

  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>RED - Rapid Education Development</title>
    <script src="https://cdn.plot.ly/plotly-latest.min.js"></script>
    <link href="styles.css" rel="stylesheet" type="text/css">
  </head>

  <body>
    
    <div class="container">
    <div id="username" style="display:none"><%= username %></div>

      <div class="header">
        <div class="title">
          <h2>RAPID</h2>
          <h2>EDUCATION</h2>
          <h2>DEVELOPMENT</h2>
        </div>
        <div class="nav">
          <ul>
            <li><a href="/">Home</a></li>
            <li><a href="/Voting">Voting</a></li>
            <li><a href="/Emotion">Emotion</a></li>
            <li><a href="/Results">Results</a></li>
            <li>
              <form action="/logout?_method=DELETE" method="POST">
                <button type="submit">Log Out</button>
              </form>
            </li>
          </ul>
        </div>
      </div>

      <div class="main tiles-container">
        <h1>Click on what you would like to see more of from the teacher</h1>
        <div id="tiles-wrapper">
          <button id="explane">explain</button>
          <button id="question">question</button>
          <button id="goback">go back</button>
          <button id="louder">louder</button>
          <button id="slower">slower</button>
          <button id="faster">faster</button>
          <button id="clearer">clearer</button>
          <button id="breaktime">break</button>
          
          
        </div>
      </div>

      <div class="bottom" id="plotdiv"></div>

    </div>

    <script>

      //Local variables
      let votes = {};
      const wrapper = document.getElementById("tiles-wrapper");
      const username = document.getElementById('username').textContent;

      //WebSocket setup
      const connection = new WebSocket("wss://a31vmdscn7.execute-api.us-east-1.amazonaws.com/dev");
      connection.onopen = (event) => { getUserData(); };
      connection.onerror = (error) => { console.log(error); };
      connection.onmessage = (response) => {
        //Handle response
        let thisRes = JSON.parse(response.data);
        if(thisRes.name == "getUserData") {
          votes = thisRes.data;
          plotData(votes)
        }
      };

      //Event listener added to the tiles
      wrapper.addEventListener("click", (event) => {
        //Check if a button is clicked
        const isButton = event.target.nodeName === "BUTTON";
        if (!isButton) {
          return;
        } else {
          //Register the click
          const choice = event.target.id;
          votes[choice] += 1;
          event.preventDefault();
        }
        //Plot the new vote
        plotData(votes)
        //Store the new vote
        storeVotes()
      });

      //Plot the chart
      function plotData(data) {
        //Get the chart div
        const plotDiv = document.getElementById('plotdiv');
        let myData = data
        delete myData.password
        delete myData.username

        //Adjust the naming
        let xData = []
        for (let propety in myData) {
          if(propety == "explane"){
            propety = "explain"
          }
          if(propety == "breaktime"){
            propety = "break"
          }
          if(propety == "goback"){
            propety = "go back"
          }
          propety = propety.toUpperCase()

          xData.push(propety)
        }

        let yData = []
        for (let propety in myData) {
          yData.push(myData[propety])
        }

        //Plotly params
        let data1 = [{
          x: xData,
          y: yData,
          type: 'bar'
        }];

        //Plotly settings
        var layout = {
          title: "Your Voting Results",
          showlegend: false,
          font: {size: 18}
        }

        //Plotting data
        Plotly.newPlot(plotDiv, data1, layout, {displayModeBar: false, displayLogo: false, responsive: true});
      }

      //Store user votes
      function storeVotes() {

        //WebSocket params
        let msg = {
          username: username,
          votes: votes
        }

        //WebSocket message object
        let dataObj = {
          action: "storeVotes",
          data: msg
        }

        //Sending message to WebSocket
        connection.send(JSON.stringify(dataObj));
      }

      //Load user data from DynamoDB
      function getUserData() {

        //WebSocket params
        let msg = {
          username: username
        }

        //WebSocket object
        let dataObj = {
          action: "getUserVotes",
          data: msg
        }

        //WebSocket request
        connection.send(JSON.stringify(dataObj))
      }

      //Request data again after 10 seconds
      setInterval(() => {
        storeVotes()
      }, 10000);

    </script>
  </body>
</html>
