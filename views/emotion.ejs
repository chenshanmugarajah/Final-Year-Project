<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Emotion</title>
  <script src="aws-cognito-sdk.min.js"></script>
  <script src="amazon-cognito-identity.min.js"></script>
  <script src="https://sdk.amazonaws.com/js/aws-sdk-2.16.0.min.js"></script>
  <link rel="stylesheet" type="text/css" href="emotionStyles.css" />
</head>

<body class="container">
  <div class="header">
    <div class="title">
      <h2>RAPID</h2>
      <h2>EDUCATION</h2>
      <h2>DEVELOPMENT</h2>
    </div>
    <div class="nav">
      <ul>
        <li><a href="/">Home</a></li>
        <li><a href="/Voting">Voting</a></li>
        <li><a href="/Emotion">Emotion</a></li>
        <li><a href="/Results">Results</a></li>
        <li>
          <form action="/logout?_method=DELETE" method="POST">
            <button type="submit">Log Out</button>
          </form>
        </li>
      </ul>
    </div>
  </div>
  <div class="main">
    <canvas id="canvas" style="border: 1px solid black; display: none;"></canvas>
    <div id="username" style="display:none"><%= username %></div>
    <video id="video"></video> </br>
    <h3>Click snap to let RED detect and store your emotion</h3>
    <button onclick="saveImage()">Snap</button>
    <div id="image"></div>
  </div>

  <script type="text/javascript">

    //Getting div elements from the HTML
    const video = document.getElementById("video");
    const canvas = document.getElementById("canvas");
    const context = canvas.getContext("2d");
    const imageDiv = document.getElementById("image");

    //Getting the username
    const username = document.getElementById('username').textContent;

    //Navigator generalisations for web cam access across browsers
    navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia || navigator.oGetUserMedia || navigator.msGetUserMedia;
    if (navigator.getUserMedia) {
      navigator.getUserMedia({ video: true }, streamWebCam, throwError);
    }

    //Local variables
    var localStream; // web cam
    let image64; // encoded image

    //WebSocket
    const connection = new WebSocket("wss://a31vmdscn7.execute-api.us-east-1.amazonaws.com/dev");
    connection.onopen(console.log("Connection opened"))
    connection.onerror(console.log("WebSocket Error"))

    //Stream webcam
    function streamWebCam(stream) {
      //Getting web cam video and displaying it in HTML
      localStream = stream;
      video.srcObject = stream;
      video.play();
    }

    //Error handling
    function throwError(e) {
      console.log(e)
    }

    //Saving a snapshot from webcam feed
    function saveImage() {
      //Set canvas width based on web cam input
      canvas.width = video.clientWidth;
      canvas.height = video.clientHeight;
      
      //Insert image into canvas
      context.drawImage(video, 0, 1)

      //Creating encoded image
      image64 = canvas.toDataURL();

      //Inserting image into HTML
      let image = document.createElement("img");
      image.src = image64
      imageDiv.appendChild(image);

      //Calling process image function with encoded image data
      processImage(image64);
    }

    //Process the image to obtain emotion
    function processImage(image64) {
      
      //Check credentionals and update if necessary
      updateCred();

      //Variables
      var image = null;
      var jpg = true;

      //Getting relevant data from encoded image
      try {
        image = atob(image64.split("data:image/jpeg;base64,")[1]);
      } catch (e) {
        jpg = false;
      }
      if (jpg == false) {
        try {
          image = atob(image64.split("data:image/png;base64,")[1]);
        } catch (e) {
          alert("Not an image file Rekognition can process");
          return;
        }
      }

      //Extracting data needed to detect face emotion
      var length = image.length;
      imageBytes = new ArrayBuffer(length);
      var ua = new Uint8Array(imageBytes);
      for (var i = 0; i < length; i++) {
        ua[i] = image.charCodeAt(i);
      }

      //Calling detect image function with image data
      detectFaces(imageBytes);
    }

    //Analyse emotion
    function detectFaces(imageData) {
      //Get AWS Rekognition
      var rekognition = new AWS.Rekognition();

      //Create analysis params
      var params = {
        Image: {
          Bytes: imageData
        },
        Attributes: [
          'ALL',
        ]
      };

      //Call the rekognition api
      rekognition.detectFaces(params, function (err, data) {
        if (err) console.log(err, err.stack); // an error occurred
        else {
          let sortedEmotions;
          let emotion;
          let confidence;

          //Sort the emotions detected to find the most common emotion
          sortedEmotions = data.FaceDetails[0].Emotions.sort(function (a, b) {
            if (a.Confidence > b.Confidence) {
              return -1;
            } else if (b.Confidence > a.Confidence) {
              return +1;
            } else {
              return 0;
            }
          });
          
          //Emotion and the confidence of the detection
          emotion = sortedEmotions[0].Type;
          confidence = sortedEmotions[0].Confidence;

          //Adding a caption to the image inserted into HTML previously
          let caption = document.createElement("figcaption");
          caption.innerHTML = "Detected: " + emotion;
          imageDiv.appendChild(caption);

          //Creating WebSocket params
          let msg = {
            username: username,
            emotion: emotion
          }

          //Creating WebSocket object
          let dataObj = {
            action: "storeEmotion",
            data: msg
          }

          //Sending message to WebSocket
          connection.send(JSON.stringify(dataObj));
        }
      });
    }

    //Connecting to AWS
    function AnonLog() {
      //Connecting to AWS pool
      AWS.config.credentials = new AWS.CognitoIdentityCredentials({
        IdentityPoolId: 'us-east-1:04f30d3b-eb7d-4506-a480-c001213f5a98',
      });
    }

    //Updating AWS credentials
    function updateCred() {
      AWS.config.update({
        region: "us-east-1",
        accessKeyId: "ASIA2BP2RRWIEOYECNUZ",
        secretAccessKey: "8NRsc1426IO/T1YMp6ipzGhzum+UmLDvB3fLlgcG",
        sessionToken: "FwoGZXIvYXdzEJf//////////wEaDEBxe07z2nkh5+pIPSLEAYUGGD4jm8L43lA+FaYSrBvrREACTN8JoVqbrl6MMpHOxl7oaNnmwyEN3TU85c3pyYkL6KQ3VpQQjkHm1fDMxJTHUECs/uSbN1alMzVTJvnnYnby/u3Jn08vIeAbkG+cvrVmE5cH4Jug/4vS04SySw+Sqk8Un2K/Iz0bXKrpW7fF3XqAgw10MVQgL17IYnHLo0nPEI0yDQz6Au3FTe29x5w0qBKTnbzFfCw8LCoBt/0hotGxGziIU0NS9mGe01WgjysLTQconPuX9QUyLVAheAx0Kk5zp5tmPKvJclVmJD3O6peCLPR1Ryi/Wvv/yT7L20mvtm0Z46VK8g=="
      })
    }

    //Stop webcam access
    window.onclose = () => {
      localStream.stop()
    }

  </script>

</body>

</html>